#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm|xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

#if [ "$color_prompt" = yes ]; then
#    if [[ ${EUID} == 0 ]] ; then
#        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
#    else
#        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w \$\[\033[00m\] '
#    fi
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h \w \$ '
#fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto --group-directories-first'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

alias cp='/bin/cp -v'
alias mv='/bin/mv -v'
alias rm='/bin/rm -v'
alias mkdir='/bin/mkdir -v'
alias rmdir='/bin/rmdir -v'

alias HTOP='htop -u $(whoami)'
alias TOP='top -u $(whoami)'

if [ -f ~/.IsLaptop ]; then
  alias BATTERY='upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep percentage:'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi

if [ -x /usr/bin/mint-fortune ]; then
     /usr/bin/mint-fortune
fi
if [ -x /usr/bin/fortune ] ; then
     /usr/bin/fortune
fi

if [ -f /usr/lib/git-core/git-sh-prompt ]; then
  source /usr/lib/git-core/git-sh-prompt
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWUPSTREAM="auto"
  GIT_PS1_SHOWCOLORHINTS=1

  if [ -f ~/.IsLaptop ]; then
    PROMPT_COMMAND=initlaptop
    PS1='\[\033[47;30m\]RAM free: ${RAM} | CPU: ${CPU} | GPU: ${GPU} | Battery: ${BAT} \u@\h ($(uname -r)) \w$(__git_ps1 " (%s)")\[\033[0m\]\n\$ '
  else
    PROMPT_COMMAND=init
    PS1='\[\033[47;30m\]RAM free: ${RAM} | CPU: ${CPU} | GPU: ${GPU} | \u@\h ($(uname -r)) \w$(__git_ps1 " (%s)")\[\033[0m\]\n\$ '
  fi
else
  if [ -f ~/.IsLaptop ]; then
    PROMPT_COMMAND=initlaptop
    PS1='\[\033[47;30m\]RAM free: ${RAM} | CPU: ${CPU} | GPU: ${GPU} | Battery: ${BAT} \u@\h ($(uname -r)) \w\[\033[0m\]\n\$ '
  else
    PROMPT_COMMAND=init
    PS1='\[\033[47;30m\]RAM free: ${RAM} | CPU: ${CPU} | GPU: ${GPU} | \u@\h ($(uname -r)) \w\[\033[0m\]\n\$ '
  fi
fi

function promptRAM()
{
  RAM="$(free -h | awk 'NR==2 {print $4 "/" $2}')"
}

function promptCPU()
{
  read cpu a b c previdle rest < /proc/stat
  prevtotal=$((a+b+c+previdle))
  sleep 0.1
  read cpu a b c idle rest < /proc/stat
  total=$((a+b+c+idle))
  CPUUTIL="$((100 * ( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal)))%"
  CPUTEMP=""
  if [ "${USER}" == "ga56gix" ]; then
    if [ "${HOSTNAME}" == "mykonos" ]; then
      CPUTEMP=", $(sensors | grep "CPU Temperature" | awk '{print $3}')"
    elif [ "${HOSTNAME}" == "dell01" ] || [ "${HOSTNAME}" == "dell02" ] || \
         [ "${HOSTNAME}" == "dell03" ] || [ "${HOSTNAME}" == "dell04" ] || \
         [ "${HOSTNAME}" == "smaug" ]; then
      CPUTEMP=", $(sensors | grep "CPU" | awk '{print $2}')"
    fi
  elif [ "${USER}" == "di75faw" ]; then
    if [ "${HOSTNAME}" == "badwlrz-cl01399" ]; then
      CPUTEMP=", $(sensors | grep "Package id 0:" | awk '{print $4}')"
    fi
  fi
  CPU="${CPUUTIL}${CPUTEMP}"
}

function promptBAT()
{
  BAT="$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep "percentage:" | awk '{print $2}')"
}

function promptGPU()
{
  GPU="---"
  if [ -x "$(command -v nvidia-smi)" ]; then
    if [ "${HOSTNAME}" == "max" ]; then
      GPUUTI="$(nvidia-smi --query-gpu="utilization.gpu" --format="csv,noheader" | awk '{print $1 "%"}')"
      GPUTMP="$(nvidia-smi --query-gpu="temperature.gpu" --format="csv,noheader")Â°C"
      GPUDRIVER="$(nvidia-smi -q | grep "Driver Version" | awk '{print $4}')"
      GPU="${GPUUTI}, ${GPUTMP} (${GPUDRIVER})"
    fi
  fi
}

function fetchgit()
{
# If we are in a git repository fetch in the background
if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" == "true" ]; then
  # If there is no instance of git fetch running
  if [ "$(pgrep -a git | grep 'git fetch')" == "" ]; then
    # () runs the command in a subshell to avoid the Done message due to the running in background
    (git fetch &)
  fi
fi
}

function init()
{
  promptRAM
  promptCPU
  promptGPU
  fetchgit
}

function initlaptop()
{
  promptRAM
  promptCPU
  promptBAT
  promptGPU
  fetchgit
}

if [ -f "${HOME}/.localstuff" ]; then
  source "${HOME}/.localstuff"
fi

if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# If ~/.inputrc doesn't exist yet: First include the original /etc/inputrc so it won't get overriden
if [ ! -a ~/.inputrc ]; then
    echo '$include /etc/inputrc' > ~/.inputrc
fi
# Add shell-option to ~/.inputrc to enable case-insensitive tab completion
echo 'set completion-ignore-case On' >> ~/.inputrc
